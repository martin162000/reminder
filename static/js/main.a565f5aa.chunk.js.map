{"version":3,"sources":["components/Home/PaginationPosts.tsx","components/Home/AllPosts.tsx","components/Home.tsx","types/variables.ts","components/Add.tsx","components/Post.tsx","App.tsx","index.tsx"],"names":["PaginationPosts","props","totalPosts","postsPerPage","paginate","pageNumbers","i","Math","ceil","push","useState","page","setpage","Pagination","className","count","length","color","onChange","event","value","shape","HomePosts","currentPosts","allSendPosts","history","useHistory","pathname","Grid","item","xs","style","width","margin","padding","minHeight","container","direction","justifyContent","alignContent","map","post","md","lg","onClick","e","id","filter","onDeleteChange","localStorage","setItem","JSON","stringify","removeItem","to","name","text","date","time","Button","variant","size","minWidth","Home","postsFromLocalStorage","currentPage","setcurrentPage","indexOfLastPost","indexOfFirstPost","reverse","slice","AllPosts","data","number","dayDate","Date","getDate","getMonth","getFullYear","timeDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","CssTextField","styled","TextField","shouldForwardProp","p","borderColor","defaultcolor","focusColor","background","Add","title","setTitle","setText","errorTitle","setErrorTitle","errorTextPost","setErrorTextPost","Box","sx","noValidate","autoComplete","onSubmit","preventDefault","undefined","newDate","max","target","label","required","error","multiline","rows","marginTop","startIcon","type","fontSize","Post","postId","useParams","thisPost","Number","namePost","setNamePost","textPost","setTextPost","withoutEditedPost","App","saved","getItem","parse","allPosts","setAllPosts","handleChange","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a565f5aa.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport Pagination from '@mui/material/Pagination';\r\n\r\n\r\n\r\ninterface Props {\r\n    paginate: (number:number) => void\r\n    totalPosts:any;\r\n    postsPerPage:any;\r\n\r\n    \r\n}\r\n\r\nconst PaginationPosts = (props: Props) => {\r\n\r\n    let {totalPosts,postsPerPage,paginate} = props\r\n\r\n    const pageNumbers:any = []\r\n    for(let i = 1; i<=Math.ceil(totalPosts / postsPerPage); i++) {\r\n        pageNumbers.push(i);\r\n    }\r\n\r\n    const [page, setpage] = useState(1)\r\n    const handleGetPaginate = (event:any, value:any) => {\r\n\r\n            setpage(value);\r\n            paginate(value)\r\n    }\r\n\r\n\r\n    return (\r\n\r\n\r\n\r\n            <Pagination className=\"pagination\" count={pageNumbers.length} page={page} color=\"standard\" onChange={handleGetPaginate} shape=\"rounded\" />\r\n\r\n\r\n        /*<ul>\r\n            {pageNumbers.map((number:any) => (\r\n                <li key={number}>\r\n                    <span onClick={() => paginate(number)}>\r\n                        {number}\r\n                    </span>\r\n                </li>\r\n            ))}\r\n        </ul>*/\r\n\r\n    )\r\n}\r\n\r\nexport default PaginationPosts\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport BackspaceTwoToneIcon from '@material-ui/icons/BackspaceTwoTone';\r\nimport AddBoxIcon from '@mui/icons-material/AddBox';\r\nimport Button from '@mui/material/Button';\r\n\r\n\r\ninterface Props {\r\n    onDeleteChange: (data:any) => void\r\n    currentPosts: {\r\n        id: number;\r\n        name: string;\r\n        text: string;\r\n        date: string;\r\n        time: string;\r\n    }[]\r\n\r\n    allSendPosts: {\r\n        id: number;\r\n        name: string;\r\n        text: string;\r\n        date: string;\r\n        time: string;\r\n    }[]\r\n}\r\n\r\n\r\n\r\nexport const HomePosts = (props: Props) => {\r\n\r\n    let {currentPosts, allSendPosts} = props\r\n      const history = useHistory();\r\n\r\n    const handleDelete = (e:any,id:any) => {\r\n\r\n        allSendPosts = allSendPosts.filter((item:any) => item.id !== id) // Delete clicked item\r\n        props.onDeleteChange(allSendPosts) // Callback to parent \"Home.tsx\"\r\n        localStorage.setItem(\"Data\", JSON.stringify(allSendPosts)); // Save to Data in localStorage\r\n\r\n        if (allSendPosts.length === 0) {\r\n             localStorage.removeItem(\"Data\");\r\n        }\r\n     }\r\n\r\n     if(currentPosts.length === 0 && allSendPosts.length !== 0) {\r\n         history.push({\r\n            pathname: '/'\r\n        }); \r\n\r\n     }\r\n\r\n\r\n\r\n    return (\r\n                <Grid \r\n                item xs={12} \r\n                style={{width:'100%', margin:'0', padding:'0', minHeight:'870px'}}   \r\n                container\r\n                direction=\"row\"\r\n                justifyContent=\"flex-start\"\r\n                alignContent=\"flex-start\"\r\n                > \r\n\r\n\r\n                        {currentPosts.length > 0 ? (\r\n\r\n                                currentPosts.map(post => (\r\n                                \r\n                                    <Grid key={post.id} className=\"gridPost fadeIn\" item xs={12} md={6} lg={4} >\r\n                                            <article>\r\n                                                <span className=\"delete\" \r\n                                                      onClick={(e) => handleDelete(e,post.id)}\r\n                                                ><BackspaceTwoToneIcon className=\"deleteIcon\"/>\r\n                                                    \r\n                                                </span>  \r\n\r\n                                                <Link to={{\r\n                                                    pathname: `/post/${post.id}`,\r\n                                                }}>\r\n                                                    <div className=\"posts\">\r\n                                                        <p>Show <span>or</span> Edit</p>\r\n                                                            <h2>{post.name}</h2>\r\n                                                            <span> {post.text}  </span>\r\n                                                            <div className=\"date\">{post.date}</div>\r\n                                                            <div className=\"time\">{post.time}</div>\r\n                                                           \r\n                                                        </div>\r\n                                                        <div className=\"afterDate\"></div>\r\n                                                        <div className=\"afterTime\"></div>\r\n                                                </Link>\r\n\r\n                                            </article>\r\n                                    </Grid>\r\n                               \r\n\r\n                            ))\r\n                            ) : (\r\n                                <div className=\"dontAnyPost\"> You don't have any post. Please click on \r\n\r\n                                    <Link\r\n                                        to={{\r\n                                        pathname: \"/Add\",\r\n                                        }}>\r\n                                        <Button variant=\"contained\" size=\"medium\" color=\"success\" style={{ minWidth: '0px', padding: '4px 8px', margin:'0 6px' }} /*startIcon={<DeleteIcon />}*/>\r\n                                            <AddBoxIcon/>\r\n                                        </Button>\r\n                                </Link>\r\n\r\n                                 and create your first post\r\n                               </div>\r\n\r\n                            )}\r\n\r\n\r\n\r\n\r\n                        \r\n                  \r\n\r\n\r\n            </Grid>\r\n    )\r\n}\r\n\r\nexport default HomePosts\r\n","import { Link } from 'react-router-dom';\r\nimport Grid from '@mui/material/Grid';\r\nimport Button from '@mui/material/Button';\r\nimport AddBoxIcon from '@mui/icons-material/AddBox';\r\n\r\n\r\n\r\nimport PaginationPosts from './Home/PaginationPosts';\r\nimport AllPosts from './Home/AllPosts';\r\nimport { useState } from 'react';\r\n\r\n\r\ninterface Props {\r\n   onChange: (data:any) => void\r\n   postsFromLocalStorage : {\r\n        id: number;\r\n        name: string;\r\n        text: string;\r\n        date: string;\r\n        time: string;\r\n    }[]\r\n}\r\n\r\n\r\n\r\nexport const Home = (props: Props) => {\r\n\r\n    const {postsFromLocalStorage, onChange} = props\r\n\r\n    // CALLBACK\r\n      const handleDeleteChange = (data:any) => {\r\n           onChange(data) // callback to app\r\n      }\r\n    \r\n    // Pagination\r\n      const [currentPage, setcurrentPage] = useState(1)\r\n      const [postsPerPage] = useState(9)\r\n      const indexOfLastPost:any = currentPage * postsPerPage\r\n      const indexOfFirstPost:any = indexOfLastPost - postsPerPage\r\n      const currentPosts:any = postsFromLocalStorage.length !== 0 ?  postsFromLocalStorage.reverse().slice(indexOfFirstPost, indexOfLastPost) : postsFromLocalStorage.slice(indexOfFirstPost, indexOfLastPost) \r\n      const paginate = (number:number) => setcurrentPage(number) // Update state CurrentPosts\r\n      \r\n\r\n    return (\r\n       \r\n                <Grid container style={{width:'100%', margin:'0', padding:'0', justifyContent: 'flex-end'}}>\r\n                    <Grid item xs={12} md={12} lg={12} className=\"menuMain\"> \r\n\r\n\r\n                        <Link\r\n                         to={{\r\n                            pathname: \"/Add\",\r\n                         }}>\r\n                            <Button variant=\"contained\" size=\"medium\" color=\"success\" style={{ /*minWidth: '0px', padding: '4px 8px' */}} /*startIcon={<DeleteIcon />}*/>\r\n\r\n                                <AddBoxIcon/>\r\n                            </Button>\r\n                        </Link>\r\n                    </Grid>\r\n\r\n\r\n\r\n                    <AllPosts \r\n                        currentPosts = {currentPosts}\r\n                        allSendPosts = {postsFromLocalStorage.length !== 0 ?  postsFromLocalStorage.reverse() : postsFromLocalStorage}\r\n                        onDeleteChange = {handleDeleteChange}\r\n                    />\r\n                    <PaginationPosts\r\n                        postsPerPage={postsPerPage} \r\n                        totalPosts={postsFromLocalStorage.length}\r\n                        paginate={paginate}/>\r\n                    \r\n                </Grid>\r\n             \r\n\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import TextField from \"@mui/material/TextField\";\r\nimport { styled } from \"@mui/material/styles\";\r\n\r\nconst dayDate = () => {\r\n\r\n    const date: Date = new Date();\r\n    const day: number =  date.getDate();\r\n    const month: number =  date.getMonth();\r\n    const year: number =  date.getFullYear();\r\n\r\n    const fullDate: string = day + '.' + month + '.' + year;  \r\n\r\n    return fullDate\r\n}\r\n\r\nconst timeDate = () => {\r\n\r\n    const date: Date = new Date();\r\n\r\n    let hours: any =  date.getHours();\r\n        hours = hours > 9 ? hours : '0' + hours;\r\n    let minutes: any =  date.getMinutes();\r\n        minutes = minutes > 9 ? minutes : '0' + minutes;\r\n    let seconds: any =  date.getSeconds();\r\n        seconds = seconds > 9 ? seconds : '0' + seconds;\r\n    const fullDate: string =  hours + ':' + minutes + ' | ' + seconds + 'sec';  \r\n\r\n    return fullDate\r\n}\r\n\r\n\r\n\r\nconst CssTextField = styled(TextField, {\r\n    shouldForwardProp: (props) => props !== \"focusColor\"\r\n  })((p:any) => ({\r\n    \"& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\r\n      borderColor: p.defaultcolor\r\n    },\r\n    \"&:hover .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\r\n      borderColor: p.focusColor\r\n    },\r\n    \"&:focus .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\r\n      borderColor: p.focusColor\r\n    },\r\n    \"& .MuiOutlinedInput-input\": {\r\n      color: \"white\"\r\n    },\r\n    \"&:hover .MuiOutlinedInput-input\": {\r\n      color: \"white\"\r\n    },\r\n    \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-input\": {\r\n      color: \"white\"\r\n    },\r\n    \"& .MuiInputLabel-outlined\": {\r\n      color: p.focusColor\r\n    },\r\n    \"&:hover .MuiInputLabel-outlined\": {\r\n      color: p.focusColor\r\n    },\r\n    \"& .MuiInputLabel-outlined.Mui-focused\": {\r\n      color: p.focusColor\r\n    },\r\n\r\n    \"& .MuiOutlinedInput-root\": {\r\n      \"&.Mui-focused fieldset\": {\r\n        borderColor: p.focusColor\r\n      }\r\n    },\r\n\r\n    background: \"rgb(42 42 44)\",\r\n    color: \"white\"\r\n  }));\r\n\r\n\r\n\r\n\r\nexport {dayDate, timeDate, CssTextField}","import React, { useState } from 'react'\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport Button from '@mui/material/Button';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { dayDate, timeDate, CssTextField} from '../types/variables'\r\n\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\n\r\n\r\ninterface Props {\r\n    onChange: (data:any) => void\r\n    postsFromLocalStorage : {\r\n         id: number;\r\n         name: string;\r\n         text: string;\r\n         date: string;\r\n         time: string;\r\n     }[]\r\n }\r\n\r\nconst Add = (props: Props) => {\r\n\r\n    let {postsFromLocalStorage } = props\r\n\r\n    const history = useHistory();\r\n    const [title, setTitle] = useState('')\r\n    const [text, setText] = useState('')\r\n    const [errorTitle, setErrorTitle] = useState(false)\r\n    const [errorTextPost, setErrorTextPost] = useState(false)\r\n\r\n    const handleSubmit = (e:any) => {\r\n        e.preventDefault()\r\n        setErrorTitle(false)\r\n        setErrorTextPost(false)\r\n\r\n        if (title === '') setErrorTitle(true)\r\n        if (text === '') setErrorTextPost(true)\r\n\r\n        if (title && text) {\r\n\r\n           if(postsFromLocalStorage === undefined || postsFromLocalStorage.length === 0) {\r\n\r\n                    const newDate = [{\r\n                        id: 1,\r\n                        name: title,\r\n                        text: text,\r\n                        date: dayDate(),\r\n                        time: timeDate()\r\n                    }]\r\n                    props.onChange(newDate)\r\n                    localStorage.setItem('Data', JSON.stringify(newDate));\r\n                    history.push({\r\n                        pathname: '/home',\r\n                    });\r\n\r\n            } else {\r\n\r\n                    const newDate = {\r\n                                id: Math.max(...postsFromLocalStorage.map((p: { id: any; }) => p.id)) +1,\r\n                                name: title,\r\n                                text: text,\r\n                                date: dayDate(),\r\n                                time: timeDate()\r\n                            }\r\n                    props.onChange(([...postsFromLocalStorage,newDate]))\r\n                    localStorage.setItem('Data', JSON.stringify([...postsFromLocalStorage,newDate]));\r\n                    history.push({\r\n                        pathname: '/home',\r\n                    }); \r\n             }\r\n\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <Box sx={{ width: '100%' }}>\r\n            <Grid item xs={12} md={12} lg={12} className=\"menuMain justifyStart\"> \r\n                <Link to={{\r\n                            pathname: \"/Home\",\r\n                         }}>\r\n                    <Button variant=\"contained\" size=\"large\" /*style={{ width: '75%' }}*/>\r\n                    <ArrowBackIcon/>\r\n                    </Button>\r\n                </Link>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={12} lg={12} \r\n                         className=\"zoomfadeOut\"\r\n                         container\r\n                         direction=\"row\"\r\n                         justifyContent=\"center\" \r\n                         alignContent=\"flex-start\"> \r\n                <form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n\r\n            <div className=\"titleForm\">  \r\n                <CssTextField\r\n                    defaultcolor=\"#1e4e20\"\r\n                    focusColor=\"#2e7d32\"\r\n                    onChange={(e:any) => setTitle(e.target.value)}\r\n                    id=\"outlinedBasic\" \r\n                    label=\"Title\" \r\n                    variant=\"outlined\"\r\n                    style ={{width: '100%'}}\r\n                    required\r\n                    error={errorTitle}\r\n                    />\r\n            </div>\r\n\r\n                <CssTextField\r\n                    defaultcolor=\"#1e4e20\"\r\n                    focusColor=\"#2e7d32\"\r\n                    onChange={(e:any) => setText(e.target.value)}\r\n                    id=\"postText\" \r\n                    label=\"Text of post\" \r\n                    variant=\"outlined\"\r\n                    multiline\r\n                    rows={22}\r\n                    style ={{width: '100%', marginTop: '2em'}}\r\n                    required\r\n                    error={errorTextPost}\r\n                    />\r\n\r\n            <div className=\"butSubmit\">\r\n                <Button\r\n                    startIcon={<CheckIcon />}\r\n                    type=\"submit\"\r\n                    color=\"success\"\r\n                    variant=\"contained\"\r\n                    style ={{width: '35%', marginTop: '2em', color: '#252526', fontSize: '16px', padding: '12px 0px'}}\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n            </div> \r\n                </form>\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Add\r\n","import React, { useState } from 'react'\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport Button from '@mui/material/Button';\r\nimport { dayDate, timeDate, CssTextField} from '../types/variables'\r\n\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport Grid from '@mui/material/Grid';\r\nimport { Link} from 'react-router-dom';\r\nimport BorderColorIcon from '@mui/icons-material/BorderColor';\r\n\r\n\r\n\r\ninterface Props {\r\n    onChange: (data:any) => void\r\n    postsFromLocalStorage : {\r\n         id: number;\r\n         name: string;\r\n         text: string;\r\n         date: string;\r\n     }[]\r\n }\r\n\r\n\r\nconst Post = (props: Props) => {\r\n\r\n\r\n    const {postsFromLocalStorage } = props\r\n    const history = useHistory();\r\n    const { postId }:any = useParams<{ postId: string }>();\r\n\r\n    // allPosts from localstorage\r\n\r\n    const thisPost:any = (postsFromLocalStorage.filter((item:any) => item.id === Number(postId)));\r\n\r\n    // states\r\n    const [namePost, setNamePost] = useState(thisPost[0].name)\r\n    const [textPost, setTextPost] = useState(thisPost[0].text)\r\n    const [errorTitle, setErrorTitle] = useState(false)\r\n    const [errorTextPost, setErrorTextPost] = useState(false)\r\n\r\n\r\n\r\n\r\n        const handleEdit = (e:any) => {\r\n            e.preventDefault()\r\n            setErrorTitle(false)\r\n            setErrorTextPost(false)\r\n    \r\n            if (namePost === '') setErrorTitle(true)\r\n            if (textPost === '') setErrorTextPost(true)\r\n    \r\n            if (namePost && textPost) {\r\n    \r\n               if(postsFromLocalStorage !== undefined) {\r\n     \r\n                const newDate = {\r\n                                id: thisPost[0].id,\r\n                                name: namePost,\r\n                                text: textPost,\r\n                                date: dayDate(),\r\n                                time: timeDate()\r\n                                }\r\n                    \r\n                const withoutEditedPost:any = (postsFromLocalStorage.filter((item:any) => item.id !== Number(postId)));\r\n                withoutEditedPost.push(newDate)\r\n                props.onChange(withoutEditedPost)\r\n                    localStorage.setItem('Data', JSON.stringify(withoutEditedPost));\r\n                        history.push({\r\n                            pathname: '/home',\r\n                    })\r\n    \r\n                 }\r\n    \r\n            }\r\n        }\r\n\r\n    \r\n    return (\r\n        <div>\r\n\r\n        <Grid item xs={12} md={12} lg={12} className=\"menuMain justifyStart\"> \r\n                <Link to={{\r\n                            pathname: \"/Home\",\r\n                         }}>\r\n                    <Button variant=\"contained\" size=\"large\" /*style={{ width: '75%' }}*/>\r\n                    <ArrowBackIcon/>\r\n                    </Button>\r\n                </Link>\r\n            </Grid>\r\n\r\n         <Grid item xs={12} md={12} lg={12} \r\n                         className=\"zoomfadein\"\r\n                         container\r\n                         direction=\"row\"\r\n                         justifyContent=\"center\" \r\n                         alignContent=\"flex-start\"> \r\n\r\n            <form noValidate autoComplete=\"off\" onSubmit={handleEdit}>\r\n\r\n\r\n\r\n\r\n            <div className=\"titleForm\">\r\n            <CssTextField\r\n                        defaultcolor=\"#764c34\"\r\n                        focusColor=\"#f28d52\"\r\n                        id=\"outlinedBasic\" \r\n                        label=\"Title\" \r\n                        variant=\"outlined\"\r\n                        style ={{width: '100%'}}\r\n                        required\r\n                        value={namePost}\r\n                        onChange={(e:any) => setNamePost(e.target.value)}\r\n                        error={errorTitle}\r\n                        />\r\n\r\n            </div>\r\n\r\n            <CssTextField\r\n                        defaultcolor=\"#764c34\"\r\n                        focusColor=\"#f28d52\"\r\n                        id=\"postText\"\r\n                        label=\"Text of post\" \r\n                        variant=\"outlined\"\r\n                        style ={{width: '100%', marginTop: '2em'}}\r\n                        required\r\n                        multiline\r\n                        rows={22}\r\n                        value={textPost}\r\n                        onChange={(e:any) => setTextPost(e.target.value)}\r\n                        error={errorTextPost}\r\n                        />\r\n                <div className=\"butSubmit\">\r\n                    <Button\r\n                            type=\"submit\"\r\n                            color=\"secondary\"\r\n                            variant=\"contained\"\r\n                            style ={{width: '35%', marginTop: '2em', color: '#252526', background: '#F28D52', fontSize: '16px', padding: '12px 0px'}}\r\n                            startIcon={<BorderColorIcon />}>\r\n                                Edit\r\n                    </Button>\r\n                </div>\r\n                </form>\r\n        </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React, { useState } from 'react';\nimport './scss/App.scss';\n\n\nimport {Switch, Route, Redirect} from 'react-router-dom';\n\nimport Home from './components/Home'\nimport Add from './components/Add'\nimport Post from './components/Post'\n\n\nfunction App() {\n\n    const [allPosts, setAllPosts] = useState(() => {\n    const saved:any = localStorage.getItem(\"Data\");\n    const initialValue = JSON.parse(saved);\n   return initialValue || \"\";\n});\n\n      // CALLBACK\n      const handleChange = (data:any) => {\n        setAllPosts(data)\n  }\n\n\n  return (\n    <div className=\"App\">\n          \n        <div className=\"reminder\">\n        <h1> Reminder </h1>\n          \n\n          <Switch>\n\n\n              <Route exact path=\"/\">\n                  <Redirect to=\"/home\" />\n              </Route>\n\n              <Route path=\"/reminder\">\n                  <Redirect to=\"/home\" />\n              </Route>\n\n              <Route path=\"/home\" exact >\n                <Home \n                     postsFromLocalStorage = {allPosts}\n                     onChange = {handleChange}\n                 />\n              </Route>\n\n              <Route path=\"/add\"> \n                  <Add \n                        postsFromLocalStorage = {allPosts}\n                        onChange = {handleChange}\n                    />\n              </Route>\n              \n              <Route path=\"/post/:postId\" component={Post}>\n                  <Post\n                        postsFromLocalStorage = {allPosts}\n                        onChange = {handleChange}\n                    />\n              </Route>\n\n           </Switch>\n        </div>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom'\nimport './scss/index.scss';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}